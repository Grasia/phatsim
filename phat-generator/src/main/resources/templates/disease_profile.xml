@@@program xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"@@@
 @@@repeat id="diseaseProfile"@@@
	@@@saveto@@@
		@@@file overwrite="yes"@@@
			@@@v@@@output@@@/v@@@/phat/agents/filters/@@@v@@@dpName@@@/v@@@_@@@v@@@aName@@@/v@@@.java@@@/file@@@
@@@text@@@
package phat.agents.filters;

import phat.agents.Agent;
import phat.agents.automaton.*;
import phat.agents.automaton.tasks.seq.*;
import phat.agents.automaton.conditions.*;
import phat.agents.filters.*;
import phat.agents.filters.types.*;

public class @@@v@@@dpName@@@/v@@@_@@@v@@@aName@@@/v@@@ extends DiseaseManager {

    public @@@v@@@dpName@@@/v@@@_@@@v@@@aName@@@/v@@@(Agent agent, String simulation) {
        super(agent);
        initSymptoms(simulation);
    }
    
    private void initSymptoms(String simulation) {
        setStage("@@@v@@@stageName@@@/v@@@");
        @@@repeat id="symptoms"@@@
        @@@v@@@sympType@@@/v@@@ @@@v@@@sympName@@@/v@@@ = new @@@v@@@sympType@@@/v@@@("@@@v@@@sympName@@@/v@@@");
        @@@repeat id="setSympEvo"@@@
            @@@v@@@sympName@@@/v@@@.setSymptomEvolution(new @@@v@@@sympEvoName@@@/v@@@(agent, @@@v@@@sympName@@@/v@@@));@@@/repeat@@@
        switch (simulation){
    	@@@repeat id="simInit"@@@
            case "@@@v@@@simName@@@/v@@@":
                @@@v@@@sympName@@@/v@@@.setDiseaseManager(this);
                @@@v@@@sympName@@@/v@@@.setCurrentLevel(@@@v@@@symptomLevel@@@/v@@@);
                break;@@@/repeat@@@	    
        }
        add(@@@v@@@sympName@@@/v@@@);
    	
        @@@repeat id="createFilters"@@@{
            @@@repeat id="createFilter"@@@
                @@@repeat id="FUnableFilter"@@@UnableFilter @@@v@@@filterName@@@/v@@@ = new UnableFilter();@@@/repeat@@@
                @@@repeat id="FChangeToolFilter"@@@ @@@/repeat@@@
                @@@repeat id="FChangeTargetObjFilter"@@@ @@@/repeat@@@
                @@@repeat id="FReplaceTaskFilter"@@@ReplaceTaskFilter @@@v@@@filterName@@@/v@@@ = new ReplaceTaskFilter()
                        .setTask(new @@@v@@@seqTaskClass@@@/v@@@Task(agent, "@@@v@@@seqTaskClass@@@/v@@@").getClass())
                        .setType(phat.agents.filters.types.ReplaceTaskFilter.TYPE.@@@v@@@repType@@@/v@@@);@@@/repeat@@@
                @@@repeat id="FModifyPlaceFilter"@@@ @@@/repeat@@@
                @@@repeat id="FDelayFilter"@@@DelayFilter @@@v@@@filterName@@@/v@@@ = new DelayFilter();
                @@@v@@@filterName@@@/v@@@.setDelay(@@@v@@@delayValude@@@/v@@@);@@@/repeat@@@
                @@@repeat id="FTaskSelectorFilter"@@@ SelectorFilter @@@v@@@filterName@@@/v@@@ = new SelectorFilter();
                @@@v@@@filterName@@@/v@@@.setByType(@@@v@@@byType@@@/v@@@);
                @@@repeat id="allowedTaskRep"@@@
                @@@v@@@filterName@@@/v@@@.addType("@@@v@@@taskType@@@/v@@@");
                @@@v@@@filterName@@@/v@@@.addId("@@@v@@@taskId@@@/v@@@");@@@/repeat@@@
                @@@/repeat@@@
                @@@repeat id="setCond"@@@@@@v@@@filterName@@@/v@@@.setCondition(@@@v@@@filterCond@@@/v@@@);@@@/repeat@@@
                @@@repeat id="setFirstFilter"@@@ @@@v@@@sympName@@@/v@@@.add(@@@v@@@symplevel@@@/v@@@, @@@v@@@firstFilter@@@/v@@@); @@@/repeat@@@
            @@@/repeat@@@
            @@@repeat id="nextFilterRep"@@@@@@v@@@sourceFilter@@@/v@@@.setNextFilter(@@@v@@@targetFilter@@@/v@@@);
            @@@/repeat@@@
            @@@repeat id="alternativeFilterRep"@@@@@@v@@@sourceFilter@@@/v@@@.setAlterrnativeFilter(@@@v@@@targetFilter@@@/v@@@);
            @@@/repeat@@@};
        @@@/repeat@@@
                
        @@@/repeat@@@
        agent.getAutomaton().setAutomatonModificator(this);
    }
}
@@@/text@@@
	@@@/saveto@@@
	@@@/repeat@@@   
@@@/program@@@
