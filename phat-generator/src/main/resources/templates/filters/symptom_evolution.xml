@@@program xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"@@@
 @@@repeat id="symptomEvolution"@@@
	@@@saveto@@@
		@@@file overwrite="yes"@@@
			@@@v@@@output@@@/v@@@/phat/agents/filters/@@@v@@@seName@@@/v@@@.java@@@/file@@@
@@@text@@@
package phat.agents.filters;

import phat.agents.Agent;
import phat.agents.automaton.FallAutomaton;
import phat.agents.automaton.conditions.ProbCondition;
import phat.agents.filters.types.ReplaceTaskFilter;
import phat.agents.filters.types.SelectorFilter;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import phat.PHATInterface;
import phat.agents.Agent;
import phat.agents.automaton.*;
import phat.agents.automaton.conditions.*;
import phat.agents.filters.*;

public class @@@v@@@seName@@@/v@@@ extends FSMSymptomEvolution {

    public @@@v@@@seName@@@/v@@@(Agent agent, Symptom symptom) {
        super(agent, symptom);
    }
    
    protected void initSymptomEvolutionBehavior(PHATInterface phatInterface) {
        @@@repeat id="symStates"@@@
        SymptomState @@@v@@@ssName@@@/v@@@ = new SymptomState(agent, symptom, Symptom.Level.@@@v@@@levelName@@@/v@@@);
        @@@/repeat@@@
        
        @@@repeat id="symStatesTrans"@@@
        registerTransition(@@@v@@@stateSource@@@/v@@@, new Transition(@@@v@@@condInst@@@/v@@@, @@@v@@@stateTarget@@@/v@@@));
        @@@/repeat@@@
    }
}
@@@/text@@@
	@@@/saveto@@@
	@@@/repeat@@@   
@@@/program@@@