@@@program xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"@@@
	@@@repeat id="simInitialization"@@@
	
	@@@saveto@@@
		@@@file overwrite="yes"@@@
			@@@v@@@output@@@/v@@@/phat/sim/Main@@@v@@@simName@@@/v@@@PHATSimulation.java@@@/file@@@
@@@text@@@
package phat.sim;


import java.rmi.AlreadyBoundException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;

import phat.agents.Agent;
import phat.body.BodiesAppState;
import phat.body.commands.*;
import phat.devices.commands.*;
import phat.config.*;
import phat.world.MonitorEventQueue;
import phat.world.MonitorEventQueueImp;
import phat.world.WorldAppState;
import phat.structures.houses.HouseFactory;
import phat.structures.houses.commands.*;
import phat.PHATInitializer;
import phat.PHATInterface;
import phat.agents.impl.*;

/**
 *
 * @author pablo
 */
public class Main@@@v@@@simName@@@/v@@@PHATSimulation implements PHATInitializer {
	static MonitorEventQueueImp meq=new MonitorEventQueueImp();
    public static void main(String[] args) throws RemoteException, AlreadyBoundException, NotBoundException {
    	meq.startServer(MonitorEventQueue.DefaultName);
        Main@@@v@@@simName@@@/v@@@PHATSimulation sim = new Main@@@v@@@simName@@@/v@@@PHATSimulation();
        PHATInterface phat = new PHATInterface(sim);
        phat.setSeed(@@@v@@@seedValue@@@/v@@@L);
        phat.start();
    }

    @Override
    public void initWorld(WorldConfigurator worldConfig) {
        worldConfig.setTime(@@@v@@@year@@@/v@@@, @@@v@@@month@@@/v@@@, @@@v@@@day@@@/v@@@, @@@v@@@hour@@@/v@@@, @@@v@@@min@@@/v@@@, @@@v@@@sec@@@/v@@@);
        worldConfig.setTimeVisible(true);
        worldConfig.setLandType(WorldAppState.LandType.Grass);
    }

    @Override
    public void initHouse(HouseConfigurator houseConfig) {
        houseConfig.addHouseType("House1", HouseFactory.HouseType.House3room2bath);
    }

    @Override
    public void initBodies(BodyConfigurator bodyConfig) {
       @@@repeat id="bodies"@@@
       bodyConfig.createBody(BodiesAppState.BodyType.@@@v@@@bodyType@@@/v@@@, "@@@v@@@actorname@@@/v@@@");
       bodyConfig.runCommand(new BodyLabelCommand("@@@v@@@actorname@@@/v@@@", @@@v@@@showName@@@/v@@@));
       
       // Initial locations
       @@@repeat id="initLocRep"@@@bodyConfig.setInSpace("@@@v@@@actorname@@@/v@@@", "House1", "@@@v@@@iniLoc@@@/v@@@");
        @@@/repeat@@@
       bodyConfig.runCommand(new SetBodyHeightCommand("@@@v@@@actorname@@@/v@@@", 1.7f));
       @@@/repeat@@@
       @@@repeat id="CameraToBodyInit"@@@
        SetCameraToBodyCommand setCameraToBodyCommand = new SetCameraToBodyCommand("@@@v@@@actorname@@@/v@@@");
        setCameraToBodyCommand.setFront(@@@v@@@isinfrontofhuman@@@/v@@@);
        setCameraToBodyCommand.setDistance(@@@v@@@distance@@@/v@@@f);
        setCameraToBodyCommand.setHeight(@@@v@@@elevation@@@/v@@@f);
        bodyConfig.runCommand(setCameraToBodyCommand);
        bodyConfig.runCommand(new SetTransparentLevelOfWallsCommand("House1", 0.5f));@@@/repeat@@@
    }
    
    @Override
    public void initDevices(DeviceConfigurator deviceConfig) {
    	@@@repeat id="createSP"@@@
        CreateSmartphoneCommand csc@@@v@@@SPname@@@/v@@@ = new CreateSmartphoneCommand("@@@v@@@SPname@@@/v@@@");
        @@@repeat id="createSPSetDim"@@@
        csc@@@v@@@SPname@@@/v@@@.setDimensions(@@@v@@@width@@@/v@@@f , @@@v@@@height@@@/v@@@f , @@@v@@@depth@@@/v@@@f);
        @@@/repeat@@@
        deviceConfig.runCommand(csc@@@v@@@SPname@@@/v@@@);
        @@@repeat id="setLocPartOfBody"@@@
        deviceConfig.runCommand(new SetDeviceOnPartOfBodyCommand("@@@v@@@humanId@@@/v@@@","@@@v@@@SPname@@@/v@@@", SetDeviceOnPartOfBodyCommand.PartOfBody.@@@v@@@partOfBody@@@/v@@@));@@@/repeat@@@
        @@@repeat id="setLocFurniture"@@@
        deviceConfig.runCommand(new SetDeviceOnFurnitureCommand("@@@v@@@SPname@@@/v@@@", "House1", "@@@v@@@furId@@@/v@@@"));@@@/repeat@@@@@@/repeat@@@
        @@@repeat id="emulator"@@@
        deviceConfig.runCommand(new SetAndroidEmulatorCommand("@@@v@@@SPname@@@/v@@@", "@@@v@@@AvdName@@@/v@@@", "@@@v@@@AvdSerialNum@@@/v@@@"));
        @@@repeat id="installApp"@@@
        deviceConfig.runCommand(new InstallApkCommand("@@@v@@@SPname@@@/v@@@", "@@@v@@@apkFile@@@/v@@@"));@@@/repeat@@@
        @@@repeat id="AndroidApp"@@@
        deviceConfig.runCommand(new StartActivityCommand("@@@v@@@SPname@@@/v@@@", "@@@v@@@packageName@@@/v@@@", "@@@v@@@activityName@@@/v@@@"));@@@/repeat@@@@@@/repeat@@@
        
        @@@repeat id="avdScreen"@@@
        {DisplayAVDScreenCommand displayCommand = new DisplayAVDScreenCommand("@@@v@@@SPname@@@/v@@@", "@@@v@@@AvdName@@@/v@@@");
        displayCommand.setFrecuency(0.5f);
        deviceConfig.runCommand(displayCommand);}@@@/repeat@@@
    }
    
    @Override
    public void initAgents(AgentConfigurator agentsConfig) {
       @@@repeat id="agent"@@@
       {@@@v@@@agentname@@@/v@@@Agent patient=new @@@v@@@agentname@@@/v@@@Agent("@@@v@@@agentname@@@/v@@@","@@@v@@@simName@@@/v@@@" );
       patient.registerListener(meq); 
       agentsConfig.add(patient);}@@@/repeat@@@
    }
    
    @Override
    public String getTittle() {
        return "PHAT-@@@v@@@simName@@@/v@@@";
    }
}


@@@/text@@@
	@@@/saveto@@@
	
	
	@@@saveto@@@
		@@@file overwrite="yes"@@@
			@@@v@@@output@@@/v@@@/phat/sim/Main@@@v@@@simName@@@/v@@@PHATSimulationNoDevices.java@@@/file@@@
@@@text@@@
package phat.sim;


import java.rmi.AlreadyBoundException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;

import phat.agents.Agent;
import phat.body.BodiesAppState;
import phat.body.commands.*;
import phat.devices.commands.*;
import phat.config.*;
import phat.world.MonitorEventQueue;
import phat.world.MonitorEventQueueImp;
import phat.world.WorldAppState;
import phat.structures.houses.HouseFactory;
import phat.PHATInitializer;
import phat.PHATInterface;
import phat.agents.impl.*;

/**
 *
 * @author pablo
 */
public class Main@@@v@@@simName@@@/v@@@PHATSimulationNoDevices implements PHATInitializer {
	static MonitorEventQueueImp meq=new MonitorEventQueueImp();
    public static void main(String[] args) throws RemoteException, AlreadyBoundException, NotBoundException {
    	meq.startServer(MonitorEventQueue.DefaultName);
        Main@@@v@@@simName@@@/v@@@PHATSimulationNoDevices sim = new Main@@@v@@@simName@@@/v@@@PHATSimulationNoDevices();
        PHATInterface phat = new PHATInterface(sim);
        phat.setSeed(@@@v@@@seedValue@@@/v@@@L);
        phat.start();
    }

    @Override
    public void initWorld(WorldConfigurator worldConfig) {
        worldConfig.setTime(@@@v@@@year@@@/v@@@, @@@v@@@month@@@/v@@@, @@@v@@@day@@@/v@@@, @@@v@@@hour@@@/v@@@, @@@v@@@min@@@/v@@@, @@@v@@@sec@@@/v@@@);
        worldConfig.setTimeVisible(true);
        worldConfig.setLandType(WorldAppState.LandType.Grass);
    }

    @Override
    public void initHouse(HouseConfigurator houseConfig) {
        houseConfig.addHouseType("House1", HouseFactory.HouseType.House3room2bath);
    }

    @Override
    public void initBodies(BodyConfigurator bodyConfig) {
       @@@repeat id="bodies"@@@
       bodyConfig.createBody(BodiesAppState.BodyType.@@@v@@@bodyType@@@/v@@@, "@@@v@@@actorname@@@/v@@@");
       bodyConfig.runCommand(new BodyLabelCommand("@@@v@@@actorname@@@/v@@@", @@@v@@@showName@@@/v@@@));
       
       // Initial locations
       @@@repeat id="initLocRep"@@@bodyConfig.setInSpace("@@@v@@@actorname@@@/v@@@", "House1", "@@@v@@@iniLoc@@@/v@@@");
        @@@/repeat@@@
       bodyConfig.runCommand(new SetBodyHeightCommand("@@@v@@@actorname@@@/v@@@", 1.7f));
       @@@/repeat@@@
       @@@repeat id="CameraToBodyInit"@@@
        SetCameraToBodyCommand setCameraToBodyCommand = new SetCameraToBodyCommand("@@@v@@@actorname@@@/v@@@");
        setCameraToBodyCommand.setFront(@@@v@@@isinfrontofhuman@@@/v@@@);
        setCameraToBodyCommand.setDistance(@@@v@@@distance@@@/v@@@f);
        setCameraToBodyCommand.setHeight(@@@v@@@elevation@@@/v@@@f);
        bodyConfig.runCommand(setCameraToBodyCommand);@@@/repeat@@@
    }
    
    @Override
    public void initDevices(DeviceConfigurator deviceConfig) {
    }
    
    @Override
    public void initAgents(AgentConfigurator agentsConfig) {
       @@@repeat id="agent"@@@
       {@@@v@@@agentname@@@/v@@@Agent patient=new @@@v@@@agentname@@@/v@@@Agent("@@@v@@@agentname@@@/v@@@","@@@v@@@simName@@@/v@@@" );
       patient.registerListener(meq); 
       agentsConfig.add(patient);}@@@/repeat@@@
    }
    
    @Override
    public String getTittle() {
        return "PHAT-@@@v@@@simName@@@/v@@@";
    }
}


@@@/text@@@
	@@@/saveto@@@
	

@@@saveto@@@
		@@@file overwrite="yes"@@@
@@@v@@@output@@@/v@@@/phat/sim/Main@@@v@@@simName@@@/v@@@PHATSimulationOnlyDevices.java@@@/file@@@
@@@text@@@
package phat.sim;


import phat.mobile.adm.*;

/**
 *
 * @author pablo
 */
public class Main@@@v@@@simName@@@/v@@@PHATSimulationOnlyDevices  {

    public static void main(String[] args) {
       
        @@@repeat id="emulator"@@@
	AndroidCommandTools.launchAVD("@@@v@@@AvdName@@@/v@@@", "@@@v@@@AvdSerialNum@@@/v@@@");
        @@@/repeat@@@
    }

}


@@@/text@@@
	@@@/saveto@@@


@@@saveto@@@
		@@@file overwrite="yes"@@@
@@@v@@@output@@@/v@@@/scripts/createAVDs@@@v@@@simName@@@/v@@@.sh@@@/file@@@
@@@text@@@
        @@@repeat id="emulator"@@@
echo no|android create avd --force -n "@@@v@@@AvdName@@@/v@@@" -t "android-19" -c 100M --skin WVGA800 --abi x86 -a --device  "Nexus S"
        @@@/repeat@@@
@@@/text@@@
	@@@/saveto@@@
@@@saveto@@@
		@@@file overwrite="yes"@@@
@@@v@@@output@@@/v@@@/scripts/createAVDs@@@v@@@simName@@@/v@@@.bat@@@/file@@@
@@@text@@@
        @@@repeat id="emulator"@@@
echo no|android create avd --force -n "@@@v@@@AvdName@@@/v@@@" -t "android-19" -c 100M --skin WVGA800 --abi x86 -a --device  "Nexus S"
        @@@/repeat@@@
@@@/text@@@
	@@@/saveto@@@


	@@@/repeat@@@
@@@/program@@@
